import gg.jte.ContentType
import java.nio.file.Paths

plugins {
    id 'org.ethelred.graal.in.docker.plugin' version '0.8'
    id 'gg.jte.gradle' version '2.1.1'
    id 'fcgi-with-graal.java-conventions'
    id 'application'
}

dependencies {
//    implementation group: 'io.javalin', name: 'javalin-without-jetty', version: '4.4.0'
    implementation group: 'io.javalin', name: 'javalin', version: '4.6.3'
    implementation group: 'gg.jte', name: 'jte', version: '2.3.2'
    implementation('org.immutables:value:2.9.3')
    annotationProcessor("org.immutables:value:2.9.3")
    implementation project(':cgi-servlet-container'), project(':cgi-api'), project(':libfcgi-graal'), project(':logback-native-patch'), project(':standalone')

    implementation 'net.datafaker:datafaker:1.9.0'
}

graalDocker {
//    dockerImageName = imageName
    mainClassName ="org.ethelred.techtest.test2.TestJavalin"
    appName = "javalin.fcgi"

    generateNativeConfigEnvironment.putAll("CONTENT_LENGTH": "0",
            "CONTEXT_PREFIX": "",
            "GATEWAY_INTERFACE": "CGI/1.1",
            "HTTP_ACCEPT": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "HTTP_ACCEPT_ENCODING": "gzip, deflate",
            "HTTP_ACCEPT_LANGUAGE": "en-US,en;q=0.9",
            "HTTP_CONNECTION": "close",
            "HTTP_DNT": "1",
            "HTTP_HOST": "example.com",
            "HTTP_SEC_GPC": "1",
            "HTTP_UPGRADE_INSECURE_REQUESTS": "1",
            "HTTP_USER_AGENT": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36",
            "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
            "PATH_INFO": "/things",
            "QUERY_STRING": "",
            "REMOTE_ADDR": "192.168.0.3",
            "REMOTE_PORT": "52716",
            "REQUEST_METHOD": "GET",
            "REQUEST_SCHEME": "http",
            "REQUEST_URI": "/javalin.fcgi/things",
            "SCRIPT_FILENAME": "/javalin.fcgi",
            "SCRIPT_NAME": "/javalin.fcgi",
            "SCRIPT_URI": "http://example.com/javalin.fcgi/things",
            "SCRIPT_URL": "/javalin.fcgi/things",
            "SERVER_ADDR": "192.168.0.2",
            "SERVER_NAME": "example.com",
            "SERVER_PORT": "80",
            "SERVER_PROTOCOL": "HTTP/1.1")
}

repositories {
    mavenCentral()
}

// https://github.com/casid/jte/blob/master/DOCUMENTATION.md#using-the-application-class-loader-since-120
tasks.generateJte {
    sourceDirectory = Paths.get(project.projectDir.absolutePath, "src", "main", "jte")
    contentType = ContentType.Html
//    packageName = "org.ethelred.techtest.test2.jte_generated"
//    binaryStaticContent = true
    generateNativeImageResources = true
}

sourceSets.main.java.srcDir(tasks.generateJte.targetDirectory)

tasks.compileJava {
    dependsOn(tasks.generateJte)
}

tasks.processResources {
    dependsOn(tasks.generateJte)
    from(tasks.generateJte.targetResourceDirectory)
}

def prepareWeb = tasks.register('prepareWeb', Copy) {
    dependsOn nativeImage
    from("src/main/resources/public") {
        filter { line -> line.replaceAll(/@appName@/, "${graalDocker.appName.get()}")}
    }
    from("${buildDir}/deploy") {
        include "${graalDocker.appName.get()}"
    }
    into("${buildDir}/web")
}

application {
    mainClass = 'org.ethelred.techtest.test2.TestJavalin'
    applicationDefaultJvmArgs = ['-Dcgi.server=standalone', "-Dstatic.files=${projectDir}/src/main/resources/public"]
}